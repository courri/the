n <- length(x)
k2 <- k/2
pred <- vector(length=n-k)
sm <- sum(x[1:k])
if (sm >= k2) pred[1] <- 1 else pred[1] <- 0
if (n-k >= 2) {
for (i in 2:(n-k)) {
sm <- sm + x[i+k-1] - x[i-1] #_label~update@
if (sm >= k2) pred[i] <- 1 else pred[i] <- 0
}
}
return(mean(abs(pred-x[(k+1):n])))
}
b = vector(length = 15)  # 用来参考的时间段：2天... 半个月15天。
for(i in 2:15){
b[1] = 1 # 第一个数，随便初始化成1，就好
b[i] = predb(x,i)
}
print(b)
which.min(b)  # 找到差距最小的a[i] , 所对应的i值
predc <- function(x,k) {
n <- length(x)
k2 <- k/2
# the vector red will contain our predicted values
pred <- vector(length=n-k)
csx <- c(0,cumsum(x))
for (i in 1:(n-k)) {
if (csx[i+k] - csx[i] >= k2) pred[i] <- 1 else pred[i] <- 0
}
return(mean(abs(pred-x[(k+1):n])))
}
c = vector(length = 15)  # 用来参考的时间段：2天... 半个月15天。
for(i in 2:15){
c[1] = 1 # 第一个数，随便初始化成1，就好
c[i] = predc(x,i)
}
print(c)
which.min(c)  # 找到差距最小的a[i] , 所对应的i值
example(which.min)
which.min(c(1,2,3,4,5,3,3,3,0,7,7,7,8))
which.max(c(1,2,3,4,5,6,6,8,0,10,11,12,13,100,100))
which.max(c(1,2,3,4,5,6,6,8,0,10,11,12,13,100))
x<-rep(1,9)
x################################################学到这里，你最好休息一下哦
cumsum(x)
u<-c(5,2,8)
v<-c(1,3,9)
u>v
w <- function(x) return(x+1)
w(u)
sqrt(seq(9))
sqrt(1:9)
y<-c(1.2, 3.9, 0.4)
z <- round(y)
z
round(1.2)
y<-c(12,5,13)
y+4
'+'(y+4)
"+"(y+4)
f
f <- function(x,c) return((x+c)^2)
f(1:3,0)
f(1:3,1)
f(1:3,1:3)
f
f
g
}
f <- function(x,c) {
if(length(c)!=1) stop("vector c not allowed")
return((x+c)^2)
}
f(1:3,1)
f(1:3,1:3)
f(1:3,1:3)  # 这里不允许c是vector
f(1:3,1) #这里c的length = 1，可以！
f(1:3,1:3)  # 这里不允许c是vector
z12 <- function(z) return(c(z,z^2))
z12 <- function(z) return(c(z,z^2))
x<- 1:8
z12(z)
z12(x)
matrix(z12(x),ncol=2)
sapply(1:8,z12)
2.7
2.7     NA 与 NULL 值
x <- c(88,NA,12,168,13)
x
mean(x)
mean(x,na.rm=T)
x<-c(88,NULL,12,168,13)
mean(x)
x<- c(5,NA,12)
mode(x[1])
mode(x[2])
y<-c("abc", "def", NA)
mode(y[2])
mode(y[3])
z <- 1:10
z
z <- NULL
z
for (i in 1:10) if(i %% 2 ==0) z<- c(z,i)
z
seq(2,10,2)
2*1:5
2*   1:5
2*  1:5
z <- NA
z
for (i in 1:10) if(i %% 2 ==0) z<- c(z,i)
z
u<- NULL
length(u)
v<-NA
length(v)
z<-c(5,2,-3,8)
w<- z[z^2 >8]
w
z<-c(5,2,-3,8)
z
z*z>8
z<-c(5,2,-3,8)
j <- z*z >8
j
y <-c(1,2,30,5)
y[j]
z<- c(5,2,-3,8)
y <-c(1,2,30,5)
y[z*z>8]
x<-c(1,3,8,2,20)
x[x>3] <- 0
x
x<-c(6,1:3,NA,12)
x
x[x>5]
subset(x,x>5)
z<-c(5,2,-3,8)
which(z*z >8)
which.min(z)
which.max(z)
first1a <- function(x) return(which(x==1)[1])
x<- c(2,2,2,2,1,2,2,2,1)
first1a <- function(x) return(which(x==1)[1])
x<- c(2,2,2,2,1,2,2,2,1)
first1a(x)
example(ifelse)
sqrt(ifelse(x >= 0, x, print("不可计算")))
x <- c(6:-4)
sqrt(x)
sqrt(ifelse(x >= 0, x, print("不可计算")))
ifelse(x >= 0, sqrt(x), print("不可计算"))
ifelse(x >= 0, sqrt(x), print("得到纯虚数"))
ifelse(x >= 0, sqrt(x), print("得到纯虚数"))
x<-1:10
y<- ifelse(x%%2 == 1,print(x + "是奇数"),print(x + "是偶数"))
x<-1:10
y<- ifelse(x%%2 == 1,print(x + "是奇数"),print(x + "是偶数"))
y<- ifelse(x%%2 == 1,print( "是奇数"),print("是偶数"))
x<-1:10
y<- ifelse(x%%2 == 1,print( "是奇数"),print("是偶数"))
y
y<- ifelse(x%%2 == 1,print( x + "是奇数"),print(x + "是偶数"))
y
y<- ifelse(x%%2 == 1,print( x + "是奇数"),print(x + "是偶数"))
y
y<- ifelse(x%%2 == 1,print( "奇数"),print("偶数"))
y
x
y<- ifelse(x%%2 == 1,print( "奇数"),print("偶数"))
y
x<-c(5,2,9,12)
ifelse(x>6, 2*x,3*x)
findud <- function(v) {
vud <- v[-1] - v[-length(v)]  #_label~findvud1@
return(ifelse(vud > 0,1,-1))  #_label~findvud2@
}
udcorr <- function(x,y) {
ud <- lapply(list(x,y),findud)
return(mean(ud[[1]] == ud[[2]]))
}
x<- [5,12,13,3,6,0,1,15,16,8,88]
x <- c(5,12,13,3,6,0,1,15,16,8,88)
y <- c(4,2,3,23,6,10,11,12,6,3,2)
udcorr(x,y)
#向量的 滞后 运算 diff()
u<- c(1:9)
u
diff(u)
u
diff(u,2)
diff(u,9)
diff(u,8)
diff(u,2) #滞后2期
u<- c(1,6,7,2,3,5)
u
diff(u) # 滞后一期
diff(u,2) #滞后2期
sign(diff(u))
g <- c("M", "F", "F", "I", "M", "M", "F")
g
ifelse(g == "M",1,ifelse(g == "F"),2,3)
ifelse(g == "M",1,ifelse(g == "F",2,3))
m<- which(g == "M")
m
f<- which(g == "F")
i<- which(g == "I")
f<- which(g == "F")
i<- which(g == "I")
f
i
m
f
i
grps<- list()
for (gen in c("M","F","I") grps[[gen]]<-which(g = gen))
grps
for (gen in c("M","F","I")) grps[[gen]]<-which(g = gen)
grps
grps<- list()
for (gen in c("M","F","I")) grps[[gen]]<-which(g = gen)
grps
for (gen in c("M","F","I"))  grps[[gen]]<-which(g == gen)
grps
x <- c(x[1:3], 168, x[4])
grps
aba <- read.csv("abalone.data",header=T,as.is=T)
grps <- list()
for (gen in c("M","F")) grps[[gen]] <- which(aba[,1]==gen)
abam <- aba[grps$M,]
abaf <- aba[grps$F,]
plot(abam$Length,abam$Diameter)
plot(abaf$Length,abaf$Diameter,pch="x",new=FALSE)
aba <- read.csv("abalone.data",header=T,as.is=T)
aba <- read.csv("abalone.data",header=T,as.is=T)
aba <- read.csv("abalone.data",header=T,as.is=T)
grps <- list()
for (gen in c("M","F")) grps[[gen]] <- which(aba[,1]==gen)
abam <- aba[grps$M,]
abaf <- aba[grps$F,]
plot(abam$Length,abam$Diameter)
plot(abaf$Length,abaf$Diameter,pch="x",new=FALSE)
aba <- read.csv("abalone.data",header=T,as.is=T)
grps <- list()
setwd("..")
getwd()
setwd("pokai")
getwd()
aba <- read.csv("abalone.data",header=T,as.is=T)
grps <- list()
for (gen in c("M","F")) grps[[gen]] <- which(aba[,1]==gen)
abam <- aba[grps$M,]
abaf <- aba[grps$F,]
plot(abam$Length,abam$Diameter)
plot(abaf$Length,abaf$Diameter,pch="x",new=FALSE)
grps
aba
for (gen in c("M","F","I")) grps[[gen]] <- which(aba[,1]==gen)
abam <- aba[grps$M,]
abaf <- aba[grps$F,]
plot(abam$Length,abam$Diameter)
plot(abaf$Length,abaf$Diameter,pch="x",new=FALSE)
aba
abaf <- aba[grps$F,]
plot(abam$Length,abam$Diameter)
plot(abaf$Length,abaf$Diameter,pch="x",new=FALSE)
plot(aba)
#上面的代码，可以用么？？还是画不出来呢？？
### 2.10  测试向量相等
x<- 1:3
x<- 1:3
y<- c(1,3,4)
x==y
all(x==y)
identical(x,y)
x<- 1:2
y<-c(1:2)
y<-c(1,2)
x==y
identical(x,y)
typeof(x)
typeof(y)
x<- 1:2 ## : 这个符号产生的是整数
y<-c(1,2)
x==y
identical(x,y)
typeof(x)
typeof(y)
x<- c(1,2,4)
names(x)
names(x)<-c("a","b","abc")
names(x)<-c("a","b","ab")
names(x)
x
x
names(x)<-c("a","b","ab")
names(x)
x
names(x)<- NULL
x
names(x)<-c("a","b","ab")
x
x[b]
x["b"]
c(5,2,"abc")
c(5,2,list(a=1,b=4))
c(5,2,c(1.5, 6))
c
c(5,2,c(1.5, 6))
c(c(5,2),c(1.5, 6))
c(c(5, 2), c(1.5, 6))
开心！！！
library("bitops", lib.loc="~/R/win-library/3.0")
library("formatR", lib.loc="~/R/win-library/3.0")
library("boot", lib.loc="C:/Program Files/R/R-3.0.2/library")
library("graphics", lib.loc="C:/Program Files/R/R-3.0.2/library")
library("lattice", lib.loc="C:/Program Files/R/R-3.0.2/library")
library("MASS", lib.loc="C:/Program Files/R/R-3.0.2/library")
library("Matrix", lib.loc="C:/Program Files/R/R-3.0.2/library")
library("utils", lib.loc="C:/Program Files/R/R-3.0.2/library")
y<-matrix(c(1,2,3,4), nrow=2,ncol=2)
y
y<-matrix(c(1,2,3,4), nrow=2)
y
y[,2]
y<-matrix(nrow=2,ncol=2)
y[1,1]<-1
y
y[1,1]<-1
y[2,1]<-2
y[1,2]<-3
y[2,2]<-4
y
y<-matrix(c(1,2,3,4,5,6), nrow=2,byrow=T)
y
y<-matrix(c(1,2,3,4), nrow=2)
y
y%*%y
3*y
y+y
y<-matrix(c(1,1,1,2,1,0,3,0,0,4,0,0), nrow=3)
y
y<-matrix(c(1,1,1,2,1,0,3,0,0,4,0,0), nrow=4)
y
y<-matrix(c(1,1,1,2,1,0,3,0,0,4,0,0), nrow=4,byrow=T)
y
z<-matrix(c(1,1,1,2,1,0,3,0,0,4,0,0), nrow=4,byrow=T)
z
z[,2:3]
z[,2:3]
z<-matrix(c(11,12,21,22,31,32), nrow=4,byrow=T)
y<-matrix(c(11,12,21,22,31,32), nrow=4,byrow=T)
y<-matrix(c(11,12,21,22,31,32), nrow=3,byrow=T)
y
y[2:3,]
y[2:3,2]
y[2:3,2] #提取2,3行，进一步第2列的22,32
y<-matrix(c(1:6), nrow=3)
y
y[c(1,3),]<-matrix(c(111,333,666,888),nrow=2)
y
y
x<-matrix(nrow=2,ncol=2)
y<-matrix(c(4,5,2,3),nrow=2)
y
x[2:3,2:3]<-y
x
x<-matrix(nrow=3,ncol=3)
y<-matrix(c(4,5,2,3),nrow=2)
y
x[2:3,2:3]<-y
x
y
y<-matrix(c(1:6), nrow=3)
y
y[-2,]
y[,-2]
y[,-2] #去掉第二列
getwd()
setwd("pokai")
getwd()
library(pixmap)
install.packages("pixmap")
library(pixmap)
mtrush1<- read.pnm("mtrush1.pgm")
install.packages("pixmap")
library(pixmap)
mtrush1<- read.pnm("mtrush1.pgm")
install.packages("pixmap")
View(xy)
library("pixmap", lib.loc="~/R/win-library/3.0")
install.packages("pixmap")
install.packages("pixmap")
library("pixmap", lib.loc="~/R/win-library/3.0")
mtrush1<- read.pnm("mtrush1.pgm")
mtrush1<- read.pnm("mtrush1.pgm")
mtrush1
plot(mtrush1)
str(pixmap)
str(mtrush1)
mtrush1@grey[28,88]
mtrush2<-mtrush1
mtrush2@grey[84:163,135:177]<-1
plot(mtrush2)
blurpart <- function(img,rows,cols,q) {
lrows <- length(rows)
lcols <- length(cols)
newimg <- img
randomnoise <- matrix(nrow=lrows, ncol=ncols,runif(lrows*lcols))
newimg@grey <- (1-q) * img@grey + q * randomnoise
return(newimg)
}
mtrush3<-blurpart(mtrush1,84:163,135:177,0.65)
plot(mtrush3)
mtrush3<- blurpart(mtrush1,84:163,135:177,0.65)
plot(mtrush3)
blurpart <- function(img,rows,cols,q) {
lrows <- length(rows)
lcols <- length(cols)
newimg <- img
randomnoise <- matrix(nrow=lrows, ncol=ncols,runif(lrows*lcols))
newimg@grey <- (1-q) * img@grey + q * randomnoise
return(newimg)
}
mtrush3 <- blurpart(mtrush1,84:163,135:177,0.65)
plot(mtrush3)
mtrush1<- read.pnm("mtrush1.pgm")
mtrush1
plot(mtrush1)
str(mtrush1)
mtrush1@grey[28,88]
mtrush2<-mtrush1
mtrush2@grey[84:163,135:177]<-1
plot(mtrush2)
#随机噪声
blurpart <- function(img,rows,cols,q) {
lrows <- length(rows)
lcols <- length(cols)
newimg <- img
randomnoise <- matrix(nrow=lrows, ncol=ncols,runif(lrows*lcols))
newimg@grey <- (1-q) * img@grey + q * randomnoise
return(newimg)
}
mtrush3 <- blurpart(mtrush1,84:163,135:177,0.65)
plot(mtrush3)
mtrush3 <- blurpart(mtrush2,84:163,135:177,0.65)
plot(mtrush3)
mtrush3 <- blurpart(mtrush1,84:163,135:177,0.65)
plot(mtrush3)
mtrush <- blurpart(mtrush1,84:163,135:177,0.65)
plot(mtrush)
plot(mtrush3)  ##似乎并不能显示？？
x<- matrix(c(1:6),nrow=2)
x
x<- matrix(c(1:6),nrow=3)
x
x<- matrix(c(1,2,3,2,3,4),nrow=3)
x
x<- matrix(c(1,2,3,2,3,4),nrow=3)
x
x[x[,2]>=3,]
x[,2]>=3
j<-x[,2]>=3
j
x[j,]
z<-c(5,12,13)
x[z%%2==1,]
m<-matrix(c(1:6),nrow=3)
m
m[m[,1]>1 & m[,2]>5,]
m[,1]>1 & m[,2]>5
cars
summary(cars)
example(qplot)
library(ggplot2)
example(qplot)
example(qplot)
qplot(mpg, wt, data=cars, size=cyl)
cars
qplot(mpg, wt, data=cars, size=cyl)
qplot(cars, size=cyl)
qplot(cars)
set.seed(1410)  # 让样本可重复
dsmall <- diamonds[sample(nrow(diamonds), 100), ]
###### 章节2.3
qplot(carat, price, data = diamonds)
qplot(log(carat), log(price), data = diamonds)
qplot(carat, x * y * z, data = diamonds)
qplot(carat, price, data = dsmall, colour = color)
## 图2.3 将 alpha 值从 1/10(左) 变动到 1/100(中) 再到
qplot(carat, price, data = dsmall, shape = cut)
qplot(carat, price, data = dsmall, colour = color)
z = matrix((1:8),nrow = 4)
z
r <- z[2,]
r
attributes(z)
attributes(r)
str(z)
str(r)
r<-z[2,, drop = FALSE]
r
dim(r)
z[2,3]
z[3,2]
"["  (z,3,2)
u = 1:3
u
v<- as.matrix(u)
attributes(u)
attributes(v)
